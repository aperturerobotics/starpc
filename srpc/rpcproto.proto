syntax = "proto3";
package srpc;

// Packet is a message sent over a srpc packet connection.
message Packet {
  // Body is the packet body.
  oneof body {
    // CallStart initiates a new call.
    CallStart call_start = 1;
    // CallData is a message in a streaming RPC sequence.
    CallData call_data = 2;
    // CallCancel cancels the call.
    bool call_cancel = 3;
  }
}

// CallStart requests starting a new RPC call.
message CallStart {
  // RpcService is the service to contact.
  // Must be set.
  string rpc_service = 1;
  // RpcMethod is the RPC method to call.
  // Must be set.
  string rpc_method = 2;
  // Data contains the request or the first message in the stream.
  // Optional if streaming.
  bytes data = 3;
  // DataIsZero indicates Data is set with an empty message.
  bool data_is_zero = 4;
}

// CallData contains a message in a streaming RPC sequence.
message CallData {
  // Data contains the packet in the sequence.
  bytes data = 1;
  // DataIsZero indicates Data is set with an empty message.
  bool data_is_zero = 2;
  // Complete indicates the RPC call is completed.
  bool complete = 3;
  // Error contains any error that caused the RPC to fail.
  // If set, implies complete=true.
  string error = 4;
}
