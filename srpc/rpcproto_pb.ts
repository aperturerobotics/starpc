// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file github.com/aperturerobotics/starpc/srpc/rpcproto.proto (package srpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * Packet is a message sent over a srpc packet connection.
 *
 * @generated from message srpc.Packet
 */
export class Packet extends Message<Packet> {
  /**
   * Body is the packet body.
   *
   * @generated from oneof srpc.Packet.body
   */
  body:
    | {
        /**
         * CallStart initiates a new call.
         *
         * @generated from field: srpc.CallStart call_start = 1;
         */
        value: CallStart
        case: 'callStart'
      }
    | {
        /**
         * CallData is a message in a streaming RPC sequence.
         *
         * @generated from field: srpc.CallData call_data = 2;
         */
        value: CallData
        case: 'callData'
      }
    | {
        /**
         * CallCancel cancels the call.
         *
         * @generated from field: bool call_cancel = 3;
         */
        value: boolean
        case: 'callCancel'
      }
    | { case: undefined; value?: undefined } = { case: undefined }

  constructor(data?: PartialMessage<Packet>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'srpc.Packet'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'call_start', kind: 'message', T: CallStart, oneof: 'body' },
    { no: 2, name: 'call_data', kind: 'message', T: CallData, oneof: 'body' },
    {
      no: 3,
      name: 'call_cancel',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
      oneof: 'body',
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Packet {
    return new Packet().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Packet {
    return new Packet().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Packet {
    return new Packet().fromJsonString(jsonString, options)
  }

  static equals(
    a: Packet | PlainMessage<Packet> | undefined,
    b: Packet | PlainMessage<Packet> | undefined,
  ): boolean {
    return proto3.util.equals(Packet, a, b)
  }
}

/**
 * CallStart requests starting a new RPC call.
 *
 * @generated from message srpc.CallStart
 */
export class CallStart extends Message<CallStart> {
  /**
   * RpcService is the service to contact.
   * Must be set.
   *
   * @generated from field: string rpc_service = 1;
   */
  rpcService = ''

  /**
   * RpcMethod is the RPC method to call.
   * Must be set.
   *
   * @generated from field: string rpc_method = 2;
   */
  rpcMethod = ''

  /**
   * Data contains the request or the first message in the stream.
   * Optional if streaming.
   *
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0)

  /**
   * DataIsZero indicates Data is set with an empty message.
   *
   * @generated from field: bool data_is_zero = 4;
   */
  dataIsZero = false

  constructor(data?: PartialMessage<CallStart>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'srpc.CallStart'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'rpc_service',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'rpc_method', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'data', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: 'data_is_zero', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CallStart {
    return new CallStart().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CallStart {
    return new CallStart().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CallStart {
    return new CallStart().fromJsonString(jsonString, options)
  }

  static equals(
    a: CallStart | PlainMessage<CallStart> | undefined,
    b: CallStart | PlainMessage<CallStart> | undefined,
  ): boolean {
    return proto3.util.equals(CallStart, a, b)
  }
}

/**
 * CallData contains a message in a streaming RPC sequence.
 *
 * @generated from message srpc.CallData
 */
export class CallData extends Message<CallData> {
  /**
   * Data contains the packet in the sequence.
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0)

  /**
   * DataIsZero indicates Data is set with an empty message.
   *
   * @generated from field: bool data_is_zero = 2;
   */
  dataIsZero = false

  /**
   * Complete indicates the RPC call is completed.
   *
   * @generated from field: bool complete = 3;
   */
  complete = false

  /**
   * Error contains any error that caused the RPC to fail.
   * If set, implies complete=true.
   *
   * @generated from field: string error = 4;
   */
  error = ''

  constructor(data?: PartialMessage<CallData>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'srpc.CallData'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: 'data_is_zero', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'complete', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CallData {
    return new CallData().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CallData {
    return new CallData().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CallData {
    return new CallData().fromJsonString(jsonString, options)
  }

  static equals(
    a: CallData | PlainMessage<CallData> | undefined,
    b: CallData | PlainMessage<CallData> | undefined,
  ): boolean {
    return proto3.util.equals(CallData, a, b)
  }
}
