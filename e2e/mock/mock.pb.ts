// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file github.com/aperturerobotics/starpc/e2e/mock/mock.proto (package e2e.mock, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { MockMsg as MockMsg$1 } from './mock_pb.js'

/**
 * MockMsg is the mock message body.
 *
 * @generated from message e2e.mock.MockMsg
 */
export class MockMsg extends Message<MockMsg$1> {
  /**
   * @generated from field: string body = 1;
   */
  body = ''

  constructor(data?: PartialMessage<MockMsg$1>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'e2e.mock.MockMsg'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'body', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MockMsg$1 {
    return new MockMsg$1().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MockMsg$1 {
    return new MockMsg$1().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MockMsg$1 {
    return new MockMsg$1().fromJsonString(jsonString, options)
  }

  static equals(
    a: MockMsg$1 | PlainMessage<MockMsg$1> | undefined,
    b: MockMsg$1 | PlainMessage<MockMsg$1> | undefined,
  ): boolean {
    return proto3.util.equals(MockMsg$1, a, b)
  }
}
