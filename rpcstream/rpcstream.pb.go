// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.19.3
// source: github.com/aperturerobotics/starpc/rpcstream/rpcstream.proto

package rpcstream

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RpcStreamPacket is a packet encapsulating data for a RPC stream.
type RpcStreamPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*RpcStreamPacket_Init
	//	*RpcStreamPacket_Ack
	//	*RpcStreamPacket_Data
	Body isRpcStreamPacket_Body `protobuf_oneof:"body"`
}

func (x *RpcStreamPacket) Reset() {
	*x = RpcStreamPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcStreamPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcStreamPacket) ProtoMessage() {}

func (x *RpcStreamPacket) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcStreamPacket.ProtoReflect.Descriptor instead.
func (*RpcStreamPacket) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescGZIP(), []int{0}
}

func (m *RpcStreamPacket) GetBody() isRpcStreamPacket_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *RpcStreamPacket) GetInit() *RpcStreamInit {
	if x, ok := x.GetBody().(*RpcStreamPacket_Init); ok {
		return x.Init
	}
	return nil
}

func (x *RpcStreamPacket) GetAck() *RpcAck {
	if x, ok := x.GetBody().(*RpcStreamPacket_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *RpcStreamPacket) GetData() []byte {
	if x, ok := x.GetBody().(*RpcStreamPacket_Data); ok {
		return x.Data
	}
	return nil
}

type isRpcStreamPacket_Body interface {
	isRpcStreamPacket_Body()
}

type RpcStreamPacket_Init struct {
	// Init is the first packet in the stream.
	// Sent by the initiator.
	Init *RpcStreamInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type RpcStreamPacket_Ack struct {
	// Ack is sent in response to Init.
	// Sent by the server.
	Ack *RpcAck `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type RpcStreamPacket_Data struct {
	// Data is the encapsulated data packet.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

func (*RpcStreamPacket_Init) isRpcStreamPacket_Body() {}

func (*RpcStreamPacket_Ack) isRpcStreamPacket_Body() {}

func (*RpcStreamPacket_Data) isRpcStreamPacket_Body() {}

// RpcStreamInit is the first message in a RPC stream.
type RpcStreamInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ComponentId is the identifier of the component making the request.
	ComponentId string `protobuf:"bytes,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
}

func (x *RpcStreamInit) Reset() {
	*x = RpcStreamInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcStreamInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcStreamInit) ProtoMessage() {}

func (x *RpcStreamInit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcStreamInit.ProtoReflect.Descriptor instead.
func (*RpcStreamInit) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescGZIP(), []int{1}
}

func (x *RpcStreamInit) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

// RpcAck is the ack message in a RPC stream.
type RpcAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error indicates there was some error setting up the stream.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RpcAck) Reset() {
	*x = RpcAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcAck) ProtoMessage() {}

func (x *RpcAck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcAck.ProtoReflect.Descriptor instead.
func (*RpcAck) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescGZIP(), []int{2}
}

func (x *RpcAck) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto protoreflect.FileDescriptor

var file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x72,
	0x70, 0x63, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x72, 0x70, 0x63, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x52, 0x70,
	0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x70,
	0x63, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a,
	0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x70, 0x63, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0x32, 0x0a, 0x0d, 0x52, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x06, 0x52, 0x70, 0x63, 0x41, 0x63, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescOnce sync.Once
	file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescData = file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDesc
)

func file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescGZIP() []byte {
	file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescOnce.Do(func() {
		file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescData)
	})
	return file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDescData
}

var file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_goTypes = []interface{}{
	(*RpcStreamPacket)(nil), // 0: rpcstream.RpcStreamPacket
	(*RpcStreamInit)(nil),   // 1: rpcstream.RpcStreamInit
	(*RpcAck)(nil),          // 2: rpcstream.RpcAck
}
var file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_depIdxs = []int32{
	1, // 0: rpcstream.RpcStreamPacket.init:type_name -> rpcstream.RpcStreamInit
	2, // 1: rpcstream.RpcStreamPacket.ack:type_name -> rpcstream.RpcAck
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_init() }
func file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_init() {
	if File_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcStreamPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcStreamInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RpcStreamPacket_Init)(nil),
		(*RpcStreamPacket_Ack)(nil),
		(*RpcStreamPacket_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_goTypes,
		DependencyIndexes: file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_depIdxs,
		MessageInfos:      file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_msgTypes,
	}.Build()
	File_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto = out.File
	file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_rawDesc = nil
	file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_goTypes = nil
	file_github_com_aperturerobotics_starpc_rpcstream_rpcstream_proto_depIdxs = nil
}
