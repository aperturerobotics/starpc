// Code generated by protoc-gen-srpc. DO NOT EDIT.
// protoc-gen-srpc version: v0.0.0-20220611014014-aa9dc5523865
// source: github.com/aperturerobotics/starpc/integration/integration.proto

package main

import (
	context "context"

	rpcstream "github.com/aperturerobotics/starpc/rpcstream"
	srpc "github.com/aperturerobotics/starpc/srpc"
)

type SRPCIntegrationServiceClient interface {
	SRPCClient() srpc.Client

	RpcStream(ctx context.Context) (SRPCIntegrationService_RpcStreamClient, error)
}

type srpcIntegrationServiceClient struct {
	cc srpc.Client
}

func NewSRPCIntegrationServiceClient(cc srpc.Client) SRPCIntegrationServiceClient {
	return &srpcIntegrationServiceClient{cc}
}

func (c *srpcIntegrationServiceClient) SRPCClient() srpc.Client { return c.cc }

func (c *srpcIntegrationServiceClient) RpcStream(ctx context.Context) (SRPCIntegrationService_RpcStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "main.IntegrationService", "RpcStream", nil)
	if err != nil {
		return nil, err
	}
	strm := &srpcIntegrationService_RpcStreamClient{stream}
	return strm, nil
}

type SRPCIntegrationService_RpcStreamClient interface {
	srpc.Stream
	Send(*rpcstream.RpcStreamPacket) error
	Recv() (*rpcstream.RpcStreamPacket, error)
	RecvTo(*rpcstream.RpcStreamPacket) error
}

type srpcIntegrationService_RpcStreamClient struct {
	srpc.Stream
}

func (x *srpcIntegrationService_RpcStreamClient) Send(m *rpcstream.RpcStreamPacket) error {
	return x.MsgSend(m)
}

func (x *srpcIntegrationService_RpcStreamClient) Recv() (*rpcstream.RpcStreamPacket, error) {
	m := new(rpcstream.RpcStreamPacket)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcIntegrationService_RpcStreamClient) RecvTo(m *rpcstream.RpcStreamPacket) error {
	return x.MsgRecv(m)
}

type SRPCIntegrationServiceServer interface {
	RpcStream(SRPCIntegrationService_RpcStreamStream) error
}

type SRPCIntegrationServiceUnimplementedServer struct{}

func (s *SRPCIntegrationServiceUnimplementedServer) RpcStream(SRPCIntegrationService_RpcStreamStream) error {
	return srpc.ErrUnimplemented
}

const SRPCIntegrationServiceServiceID = "main.IntegrationService"

type SRPCIntegrationServiceHandler struct {
	impl SRPCIntegrationServiceServer
}

func (SRPCIntegrationServiceHandler) GetServiceID() string { return SRPCIntegrationServiceServiceID }

func (SRPCIntegrationServiceHandler) GetMethodIDs() []string {
	return []string{
		"RpcStream",
	}
}

func (d *SRPCIntegrationServiceHandler) InvokeMethod(
	serviceID, methodID string,
	strm srpc.Stream,
) (bool, error) {
	if serviceID != "" && serviceID != d.GetServiceID() {
		return false, nil
	}

	switch methodID {
	case "RpcStream":
		return true, d.InvokeMethod_RpcStream(d.impl, strm)
	default:
		return false, nil
	}
}

func (SRPCIntegrationServiceHandler) InvokeMethod_RpcStream(impl SRPCIntegrationServiceServer, strm srpc.Stream) error {
	clientStrm := &srpcIntegrationService_RpcStreamStream{strm}
	return impl.RpcStream(clientStrm)
}

func SRPCRegisterIntegrationService(mux srpc.Mux, impl SRPCIntegrationServiceServer) error {
	return mux.Register(&SRPCIntegrationServiceHandler{impl: impl})
}

type SRPCIntegrationService_RpcStreamStream interface {
	srpc.Stream
	Send(*rpcstream.RpcStreamPacket) error
	Recv() (*rpcstream.RpcStreamPacket, error)
}

type srpcIntegrationService_RpcStreamStream struct {
	srpc.Stream
}

func (x *srpcIntegrationService_RpcStreamStream) Send(m *rpcstream.RpcStreamPacket) error {
	return x.MsgSend(m)
}

func (x *srpcIntegrationService_RpcStreamStream) Recv() (*rpcstream.RpcStreamPacket, error) {
	m := new(rpcstream.RpcStreamPacket)
	if err := x.MsgRecv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *srpcIntegrationService_RpcStreamStream) RecvTo(m *rpcstream.RpcStreamPacket) error {
	return x.MsgRecv(m)
}
